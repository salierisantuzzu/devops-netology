Домашнее задание к занятию "6.1. Типы и структура СУБД"
********************************************************************************

Введение
Перед выполнением задания вы можете ознакомиться с дополнительными материалами.
********************************************************************************

Задача 1.

Архитектор ПО решил проконсультироваться у вас, какой тип БД лучше выбрать для
хранения определенных данных.
Он вам предоставил следующие типы сущностей, которые нужно будет хранить в БД:

    - Электронные чеки в json виде
    
    NoSQL Ключ-значение. Структура json-файла располагает к данному виду СУБД.
    Удобно парсить.
    
    - Склады и автомобильные дороги для логистической компании
    
    Реляционная база данных. Много различных взаимосвязанных данных. Требуется
    согласованность и доступность.
    
    - Генеалогические деревья
    
    Реляционная база данных.
    
    - Кэш идентификаторов клиентов с ограниченным временем жизни для движка
    аутенфикации
    
    Redis. Чаще всего эту СУБД используют в качестве кеширующего слоя для работы
    с данными из другой, более медленной СУБД. Лучшая замена memcached.
    
    - Отношения клиент-покупка для интернет-магазина
    
    Redis. Объем данных небольшой, схема, укладывающая в шаблон «ключ=значение».

Выберите подходящие типы СУБД для каждой сущности и объясните свой выбор.
********************************************************************************

Задача 2.

Вы создали распределенное высоконагруженное приложение и хотите классифицировать
его согласно CAP-теореме. Какой классификации по CAP-теореме соответствует ваша
система, если (каждый пункт - это отдельная реализация вашей системы и для
каждого пункта надо привести классификацию):

    - Данные записываются на все узлы с задержкой до часа (асинхронная запись)
    
    PА
    
    - При сетевых сбоях, система может разделиться на 2 раздельных кластера
    
    СА
    
    - Система может не прислать корректный ответ или сбросить соединение

    РС

А согласно PACELC-теореме, как бы вы классифицировали данные реализации?

PA/EL (Dynamo, Cassandra) - при разделении сети они отказываются от
согласованности для большей доступности, а при нормальной работе отказываются от
согласованности для более низкой задержки.

Cosmos DB поддерживает пять настраиваемых уровней согласованности, которые
позволяют выбирать между C/A во время разделения сети и L/C в случае нормальной
работы. Cosmos DB никогда не нарушает указанный уровень согласованности, поэтому
это формально CP.

PA/EC (MongoDB) - можно классифицировать как систему PA/EC. В базовом случае
система гарантирует, что чтение и запись будут согласованными.

********************************************************************************

Задача 3.

Могут ли в одной системе сочетаться принципы BASE и ACID? Почему?

Скорее не могут.

ACID
- Атомарность транзакций гарантирует, что каждая транзакция базы данных является
единым блоком, который использует подход «все или ничего» к выполнению. Если
какой-либо оператор в транзакции терпит неудачу, вся транзакция откатывается.
- Реляционные базы данных также обеспечивают согласованность каждой транзакции с
бизнес-правилами базы данных. Если какой-либо элемент атомарной транзакции
нарушит целостность базы данных, вся транзакция завершится неудачно.
- Механизм базы данных обеспечивает изоляцию между несколькими транзакциями,
происходящими в одно и то же время. Каждая транзакция происходит до или после
каждой другой транзакции, и представление базы данных, которое транзакция видит
в своем начале, изменяется только самой транзакцией до ее завершения. Ни одна
транзакция не должна видеть промежуточный продукт другой транзакции.
- Окончательный принцип ACID, долговечность , гарантирует, что после фиксации
транзакции в базе данных она постоянно сохраняется с помощью резервных копий и
журналов транзакций. В случае сбоя эти механизмы могут использоваться для
восстановления зафиксированных транзакций.

BASE


********************************************************************************

Задача 4.

Вам дали задачу написать системное решение, основой которого бы послужили:

    - фиксация некоторых значений с временем жизни    
    - реакция на истечение таймаута

Вы слышали о key-value хранилище, которое имеет механизм Pub/Sub. Что это за
система? Какие минусы выбора данной системы?

Redis.
Redis вообще-то не pub-sub система, а key-value data storage. Но он на удивление
хорошо реализует классический pub-sub и показывает замечательную производительность.

- объем данных не должен превышать объем свободного ОЗУ на вашем сервере
(на самом деле может, но тогда все они будут уходить в swap, сильно замедлять
работу, в общем лучше избегать);
- в угоду производительности присутствует довольно слабая сохранность данных.
То есть вполне может произойти такое, что данные добавили, а после рестарта их
нет. Включение AOL (append of file) немного сглаживает ситуацию, но тогда
загрузка с диска будет довольно длительной;
- транзакции и связанные данные не то, чтобы умеет. Если точнее — есть Pipeline
и Multi/Exec, но это все таки не совсем транзакция в классическом понимании;
- до сих пор не умеет нормально кластер и шардинг. Нормальной реализации до сих
пор нет.

********************************************************************************

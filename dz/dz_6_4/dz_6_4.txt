Домашнее задание к занятию "6.4. PostgreSQL".
********************************************************************************

Задача 1.
*********

- Используя docker поднимите инстанс PostgreSQL (версию 13). Данные БД сохраните в
volume.

-----------------------------
version: '3'

services:
  pg_daten:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=postgres
      - POSTGRES_DB=stage
    volumes:
      - ./pg_daten:/var/lib/postgresql/data
    ports:
      - "5432:5432"
-----------------------------

- Подключитесь к БД PostgreSQL используя psql.

-----------------------------
root@35457b898bfb:/# psql -h localhost -U postgres
psql (13.3 (Debian 13.3-1.pgdg100+1))
Type "help" for help.

postgres=#
-----------------------------

- Воспользуйтесь командой \? для вывода подсказки по имеющимся в psql
управляющим командам.

Скрин - 01_01.png

- Найдите и приведите управляющие команды для:

    - вывода списка БД
-----------------------------
postgres=# \l
                                 List of databases
   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 stage     | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
(4 rows)
-----------------------------

    - подключения к БД
-----------------------------
postgres=# \connect stage;
You are now connected to database "stage" as user "postgres".
stage=#
-----------------------------

    - вывода списка таблиц
-----------------------------
stage=# \dt
Did not find any relations.
-----------------------------

    - вывода описания содержимого таблиц
-----------------------------
stage=# \d stage;
Did not find any relation named "stage".
-----------------------------

    - выхода из psql
-----------------------------
stage=# \q
root@35457b898bfb:/#
-----------------------------

********************************************************************************

Задача 2.
*********

- Используя psql создайте БД test_database.
-----------------------------
postgres=# CREATE DATABASE test_database OWNER = "postgres";
CREATE DATABASE
postgres=#
-----------------------------
postgres=# \l
                                   List of databases
     Name      |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
---------------+----------+----------+------------+------------+-----------------------
 postgres      | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 stage         | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0     | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
               |          |          |            |            | postgres=CTc/postgres
 template1     | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
               |          |          |            |            | postgres=CTc/postgres
 test_database | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
(5 rows)
-----------------------------

- Изучите бэкап БД.
-----------------------------
cd /tmp
nano /tmp/test_dump.sql
-----------------------------

- Восстановите бэкап БД в test_database.
-----------------------------
cat /tmp/test_dump.sql | psql -h localhost -U postgres -d test_database
-----------------------------

- Перейдите в управляющую консоль psql внутри контейнера.
-----------------------------
psql -U postgres
-----------------------------

- Подключитесь к восстановленной БД и проведите операцию ANALYZE для сбора
статистики по таблице.
-----------------------------
root@35457b898bfb:/# psql -h localhost -U postgres
psql (13.3 (Debian 13.3-1.pgdg100+1))
Type "help" for help.

postgres=# \connect test_database;
You are now connected to database "test_database" as user "postgres".
test_database=# \dt+
                              List of relations
 Schema |  Name  | Type  |  Owner   | Persistence |    Size    | Description 
--------+--------+-------+----------+-------------+------------+-------------
 public | orders | table | postgres | permanent   | 8192 bytes | 
(1 row)

test_database=#
-----------------------------

test_database=# EXPLAIN ANALYZE SELECT * FROM orders;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Seq Scan on orders  (cost=0.00..1.08 rows=8 width=24) (actual time=0.007..0.009 rows=8 loops=1)
 Planning Time: 0.038 ms
 Execution Time: 0.020 ms
(3 rows)
-----------------------------
-----------------------------
test_database=# ANALYZE VERBOSE orders;
INFO:  analyzing "public.orders"
INFO:  "orders": scanned 1 of 1 pages, containing 8 live rows and 0 dead rows; 8 rows in sample, 8 estimated total rows
ANALYZE
test_database=#
-----------------------------

- Используя таблицу pg_stats, найдите столбец таблицы orders с наибольшим
средним значением размера элементов в байтах.

avg_width	integer	 	Средний размер элементов в столбце, в байтах

-----------------------------
test_database=# SELECT attname, avg_width FROM pg_stats WHERE tablename = 'orders' ORDER BY avg_width DESC;
 attname | avg_width 
---------+-----------
 title   |        16
 id      |         4
 price   |         4
(3 rows)
-----------------------------

- Приведите в ответе команду, которую вы использовали для вычисления и
полученный результат.

-----------------------------
test_database=# select * from orders;
 id |        title         | price 
----+----------------------+-------
  1 | War and peace        |   100
  2 | My little database   |   500
  3 | Adventure psql time  |   300
  4 | Server gravity falls |   300
  5 | Log gossips          |   123
  6 | WAL never lies       |   900
  7 | Me and my bash-pet   |   499
  8 | Dbiezdmin            |   501
(8 rows)
-----------------------------

-----------------------------
test_database=# SELECT attname, avg_width FROM pg_stats WHERE tablename = 'orders' ORDER BY avg_width DESC;
 attname | avg_width 
---------+-----------
 title   |        16
 id      |         4
 price   |         4
(3 rows)
-----------------------------

********************************************************************************

Задача 3.
*********

Архитектор и администратор БД выяснили, что ваша таблица orders разрослась до
невиданных размеров и поиск по ней занимает долгое время. Вам, как успешному
выпускнику курсов DevOps в нетологии предложили провести разбиение таблицы на 2
(шардировать на orders_1 - price>499 и orders_2 - price<=499).

- Предложите SQL-транзакцию для проведения данной операции.

-----------------------------
test_database=# CREATE TABLE orders_1 ( CHECK ( price > 499 ) ) INHERITS (orders);
CREATE TABLE
test_database=# CREATE TABLE orders_2 ( CHECK ( price <= 499 ) ) INHERITS (orders);
CREATE TABLE
test_database=# \dt+
                               List of relations
 Schema |   Name   | Type  |  Owner   | Persistence |    Size    | Description 
--------+----------+-------+----------+-------------+------------+-------------
 public | orders   | table | postgres | permanent   | 8192 bytes | 
 public | orders_1 | table | postgres | permanent   | 0 bytes    | 
 public | orders_2 | table | postgres | permanent   | 0 bytes    | 
(3 rows)

test_database=# INSERT INTO orders_1 (SELECT * FROM orders WHERE price > 499);
INSERT 0 3
test_database=# INSERT INTO orders_2 (SELECT * FROM orders WHERE price <= 499);
INSERT 0 5
test_database=# \dt+
                               List of relations
 Schema |   Name   | Type  |  Owner   | Persistence |    Size    | Description 
--------+----------+-------+----------+-------------+------------+-------------
 public | orders   | table | postgres | permanent   | 8192 bytes | 
 public | orders_1 | table | postgres | permanent   | 8192 bytes | 
 public | orders_2 | table | postgres | permanent   | 8192 bytes | 
(3 rows)

test_database=# SELECT * FROM orders_1;
 id |       title        | price 
----+--------------------+-------
  2 | My little database |   500
  6 | WAL never lies     |   900
  8 | Dbiezdmin          |   501
(3 rows)

test_database=# SELECT * FROM orders_2;
 id |        title         | price 
----+----------------------+-------
  1 | War and peace        |   100
  3 | Adventure psql time  |   300
  4 | Server gravity falls |   300
  5 | Log gossips          |   123
  7 | Me and my bash-pet   |   499
(5 rows)

test_database=#
-----------------------------

- Можно ли было изначально исключить "ручное" разбиение при проектировании
таблицы orders?

Да. Изначально подумав о разрастании таблиц.

SQL Шардинг позволяет разделить данные таблиц SQL на несколько инстансов
• Двигает параллелизацию в SQL на шаг вперед благодаря разделению потоков работ на
несколько серверов (вместо нескольких процессоров на 1 сервере)
• Распределенные данные далее могут быть использованы для параллельной загрузки, а
также сторонными библиотеками (например Apache Spark)

Шардинг
• Когда ф-ое разбиение и репликация не помогают
• Разбиваем данные на маленькие кусочки и храним на многих серверах
“Единственное” решение для крупного масштаба
• Нужно аккуратное планирование
• Может быть не просто реализовать
– Особенно если это не предусмотрено дизайном
• Как разбивать данные очень критичный вопрос
– Часто бывает надо несколько копий данных с разным разбиением

Шардинг и Репликация
• Шардинг используется вместе с репликацией
– В основном для высокой доступности
• Использовать Master-Master репликацию – просто использовать.

Как разбивать данные ?
• Большинство запросов должно быть к одному шарду
• Шард не становится слишком большим
• Большая часть траффика может быть из одной страны
• Множество разбиений одновременно
• Полное дублирование данных или сохранение только указателя

********************************************************************************

Задача 4.
*********

- Используя утилиту pg_dump создайте бекап БД test_database.
-----------------------------
root@16e6343ebedd:/tmp# pg_dump -U postgres > /tmp/new_dump_database.dump
root@16e6343ebedd:/tmp# ls -la
total 16
drwxrwxrwt 1 root root 4096 Jul  8 09:59 .
drwxr-xr-x 1 root root 4096 Jul  8 07:14 ..
-rw-r--r-- 1 root root  541 Jul  8 09:59 new_dump_database.dump
-rw-r--r-- 1 root root 2081 Jul  8 07:25 test_dump.sql
root@16e6343ebedd:/tmp#
-----------------------------

- Как бы вы доработали бэкап-файл, чтобы добавить уникальность значения столбца
title для таблиц test_database?

pg_dumpall -U postgres -h localhost > /tmp/new_dumpall_database.dump

nano /tmp/new_dumpall_database.dump

В файл дампа, после строк
-----------------------------
CREATE TABLE public.orders (
    id integer NOT NULL,
    title character varying(80) NOT NULL,
    price integer DEFAULT 0
);
-----------------------------

добавить
-----------------------------
CREATE UNIQUE INDEX uniq_title ON orders ( title );
-----------------------------

сохранить.

********************************************************************************

Домашнее задание к занятию 3.2

1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа;
опишите ход своих мыслей, если считаете что она могла бы быть другого типа.

type -a cd
cd — это встроенная команда bash
change directory — изменить каталог — команда командной строки для изменения
рабочего каталога. Меняет текущую папку только для оболочки,
в которой выполняется.
********************************************************************************

2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l?
man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других,
подобных некорректных вариантах использования pipe.

Без pipe можно отобразить используя ключ -c (grep -c <some_string> <some_file>)

cat ./test_3_2_q2
string111
string222
string333
grep -c string ./test_3_2_q2
3
grep -c string111 ./test_3_2_q2
1
********************************************************************************

3. Какой процесс с PID 1 является родителем для всех процессов в вашей
виртуальной машине Ubuntu 20.04?

PID 1 имеет systemd (ранее был sysvinit)

ps -A
PID TTY          TIME CMD
1 ?        00:00:00 systemd
********************************************************************************

4. Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую
сессию терминала?

ls несуществующая_директория > /dev/pts/1
где /dev/pts/1 другая сессия терминала (если сейчас находимся на != 1)

Например:
who
vagrant  pts/0        YYYY-MM-DD hh:mm (10.0.2.2)

ls % 2> /dev/pts/1

Скрин - 04-1_5-3.png

********************************************************************************

5. Получится ли одновременно передать команде файл на stdin и вывести ее stdout
в другой файл? Приведите работающий пример.

Получится

nano ./test_3_2_q51

cat ./test_3_2_q51 
ДЗ 3_2
Вопрос 5

cat ./test_3_2_q51 > ./test_3_2_q52

cat ./test_3_2_q52
ДЗ 3_2
Вопрос 5
********************************************************************************

6. Получится ли вывести находясь в графическом режиме данные из PTY
в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Получится
Сможем

Скрины - 06_1.png, 06_2.png, 04-1_5-3.png

Можно наблюдать вывод переключившись в консоль Ctrl+Alt+F2
********************************************************************************

7. Выполните команду bash 5>&1. К чему она приведет?
Что будет, если вы выполните echo netology > /proc/$$/fd/5?
Почему так происходит?

Выполнено. Скрин - 07_1.png
Привело к запуску другого bash.

Вывод в числовой идентификатор shell (PID 12827, /dev/pts/0)
Результат вывода:
netology

Скрины - 07_2.png, 07_3.png
********************************************************************************

8. Получится ли в качестве входного потока для pipe использовать только stderr
команды, не потеряв при этом отображение stdout на pty?
Напоминаем: по умолчанию через pipe передается только stdout команды слева
от | на stdin команды справа. Это можно сделать, поменяв стандартные потоки
местами через промежуточный новый дескриптор, который вы научились создавать
в предыдущем вопросе.

Можно сделать следующее:
rm file.txt >1.txt 2>&1
направить поток stdout в файл 1.txt, а затем направить stderr туда же,
куда направлен stdout с помощью оператора & перед номером потока.
********************************************************************************

9. Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный
по содержанию вывод?

Вывод информации о запущенном процессе, переменные среды, окружение процесса
Скрин - 09_1.png
Аналогичный вывод если использовать PID
echo $$
12827
cat /proc/12827/environ
Скрин - 09_2.png
Аналогичный, более читаемый вид
xargs -0 -L1 -a /proc/12827/environ
Скрин - 09_3.png
********************************************************************************

10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline,
/proc/<PID>/exe.

/proc/<PID>/cmdline - В файле хранится командная строка,
которой был запущен процесс
echo $$
12827
/proc/12827/cmdline
Вывод:
bash

/proc/<PID>/exe - Символьная ссылка на исполняемый файл,
который инициировал запуск процесса. Символьная ссылка содержащая фактическое,
полное имя выполняемого файла
lrwxrwxrwx 1 vagrant vagrant 0 Apr 16 20:22 /proc/12827/exe -> /usr/bin/bash
********************************************************************************

11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает
ваш процессор с помощью /proc/cpuinfo.

cat /proc/cpuinfo | grep sse
или
grep sse /proc/cpuinfo
Старшая версия набора инструкций SSE
sse4_2
Скрин - 11_1.png
********************************************************************************

12. При открытии нового окна терминала и vagrant ssh создается новая сессия
и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в
лекции 3.2.
Однако:
vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почитайте, почему так происходит, и как изменить поведение.

Изменить не удалось.
tty - не псевдотелетайп (эмулируемый в программном обеспечении);
это виртуальный телетайп (эмулируемый аппаратно).
Он использует экран и клавиатуру, подключённые к вашему компьютеру,
для имитации виртуального телетайпа.
********************************************************************************

13. Бывает, что есть необходимость переместить запущенный процесс из одной
сессии в другую. Попробуйте сделать это, воспользовавшись reptyr.
Например, так можно перенести в screen процесс, который вы запустили по ошибке
в обычной SSH-сессии.

а) В обычной SSH-сессии запустил top
б) Ctrl+Z (^Z) - приостановил процесс
в) jobs -l - получил номер и PID процесса top
г) bg %1 - где 1 - порядковый номер top в jobs -l. Перевёл top в работу в фоне
д) В другой сессии запустил screen
е) Командой reptyr PID (PID top) подключил процесс к screen сеансу
ё) Закончил обычную SSH-сессию. top продолжил работу в другой сессии (screen)

Скрины - 13_01.png - 13_09.png
********************************************************************************

14. sudo echo string > /root/new_file не даст выполнить перенаправление под
обычным пользователем, так как перенаправлением занимается процесс shell'а,
который запущен без sudo под вашим пользователем. Для решения данной проблемы
можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте
что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет
работать.

Команда tee считывает стандартный ввод и записывает его одновременно в
стандартный вывод и в один или несколько подготовленных файлов. При обычном
перенаправлении потока вывода (echo > file) строки команды будут записаны в
файл, но нельзя увидеть вывод одновременно. Команда tee может это сделать.

В данном случае был вызов echo с sudo, но перенаправление от обычного
пользователя. Перенаправление выполняется оболочкой, у которой нет разрешения
на запись.
Тогда как во втором варианте echo выполнено от обычного
пользователя, а tee с sudo.

Можно обойтись без tee. Только вывода не увидем.
sudo sh -c 'echo string > /root/new_file'
Чтобы проверить
sudo cat /root/new_file
string
********************************************************************************

Домашнее задание к занятию "3.5. Файловые системы"
********************************************************************************

1. Узнайте о sparse (разряженных) файлах.

Тип файла для более эффективного использования пространства ФС. На диск пишутся
метаданные (пустые блоки), вместо фактического пустого пространства. Полный
размер блока пишется только если блок имеет реальные данные.

Преимущество заключается в том, что хранилище выделяется только тогда, когда это
действительно необходимо: дисковое пространство сохраняется, и большие файлы
могут быть созданы, даже если в файловой системе недостаточно свободного места.
Экономия дискового пространства. Отсутствие временных затрат на запись нулевых
байт. Увеличение срока службы запоминающих устройств.

При этом такие файлы могут быть фрагментированными (фрагментация файла при
частой записи данных в дыры). Отчеты о свободном пространстве файловой системы
могут вводить в заблуждение. При копировании с помощью программы, которая явно
не поддерживает их, может копировать весь файл, включая пустые блоки, которые
явно не хранятся на диске.
Накладные расходы на работу со списком дыр. Невозможность записи данных в дыры
при отсутствии свободного места на диске. Невозможность использования других
индикаторов дыр, кроме нулевых байт.

Используются для образов дисков виртуальных машин (VirtualBox например),
резервных копий дисков и/или разделов, созданных специальным ПО.

ФС поддерживающие разрежённые файлы: BTRFS, NILFS, ZFS, NTFS[2], ext2, ext3,
ext4, XFS, JFS, ReiserFS, Reiser4, UFS, Rock Ridge, UDF, ReFS, APFS, F2FS
********************************************************************************

2. Могут ли файлы, являющиеся жесткой ссылкой на один объект, иметь разные права
доступа и владельца? Почему?

Не могут.
Разрешения на ссылку изменяться при изменении разрешений файла!
hardlink_file и file.txt имеют одинаковый inode, так как являются фактически
разными именами для одного файла (как зеркальная копия оригинального файла).
Изменения в одном из файлов, связанных жесткой ссылкой, отразятся в другом. При
удалении жесткой ссылки с другим файлом ничего не произойдет.
********************************************************************************

3. Сделайте vagrant destroy на имеющийся инстанс Ubuntu. Замените содержимое
Vagrantfile следующим:
Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-20.04"
  config.vm.provider :virtualbox do |vb|
    lvm_experiments_disk0_path = "/tmp/lvm_experiments_disk0.vmdk"
    lvm_experiments_disk1_path = "/tmp/lvm_experiments_disk1.vmdk"
    vb.customize ['createmedium', '--filename', lvm_experiments_disk0_path, '--size', 2560]
    vb.customize ['createmedium', '--filename', lvm_experiments_disk1_path, '--size', 2560]
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', lvm_experiments_disk0_path]
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', lvm_experiments_disk1_path]
  end
end
Данная конфигурация создаст новую виртуальную машину с двумя дополнительными
неразмеченными дисками по 2.5 Гб.

sudo fdisk -l

Скрин - 03_01.png
********************************************************************************

4. Используя fdisk, разбейте первый диск на 2 раздела: 2 Гб, оставшееся
пространство.

sudo fdisk /dev/sdb
n
p
Enter
Enter
+2048M
n
p
Enter
Enter
Enter
w

Скрин - 04_01.png
********************************************************************************

5. Используя sfdisk, перенесите данную таблицу разделов на второй диск.

sudo -i
sfdisk -d /dev/sdb | sfdisk /dev/sdc

Скрины - 05_01.png 05_02.png
********************************************************************************

6. Соберите mdadm RAID1 на паре разделов 2 Гб.
7. Соберите mdadm RAID0 на второй паре маленьких разделов.

mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 /dev/sdb1 /dev/sdc1
mdadm --create --verbose /dev/md1 --level=0 --raid-devices=2 /dev/sdb2 /dev/sdc2

Скрины - 06-07_00.png 06-07_01.png 06-07_02.png
********************************************************************************

8. Создайте 2 независимых PV на получившихся md-устройствах.

pvcreate /dev/md0
pvcreate /dev/md1

Скрин - 08_01.png
********************************************************************************

9. Создайте общую volume-group на этих двух PV.

vgcreate VGtestGroup /dev/md0 /dev/md1

Скрин - 09_01.png
********************************************************************************

10. Создайте LV размером 100 Мб, указав его расположение на PV с RAID0.

lvcreate -L 100M -n LV_One VGtestGroup /dev/md1

Скрин - 10_01.png
********************************************************************************

11. Создайте mkfs.ext4 ФС на получившемся LV.

mkfs.ext4 /dev/VGtestGroup/LV_One

Скрин - 11_01.png
********************************************************************************

12. Смонтируйте этот раздел в любую директорию, например, /tmp/new

mkdir /tmp/new
mount /dev/VGtestGroup/LV_One /tmp/new

Скрин - 12_01.png
********************************************************************************

13. Поместите туда тестовый файл, например
wget https://mirror.yandex.ru/ubuntu/ls-lR.gz -O /tmp/new/test.gz

cd /tmp/new
wget https://mirror.yandex.ru/ubuntu/ls-lR.gz -O /tmp/new/test.gz

Скрин - 13_01.png
********************************************************************************

14. Прикрепите вывод lsblk

lsblk

Скрин - 14_01_lsblk.png
********************************************************************************

15. Протестируйте целостность файла:

gzip -t /tmp/new/test.gz
echo $?
0

Скрин - 15_01.png
********************************************************************************

16. Используя pvmove, переместите содержимое PV с RAID0 на RAID1.

pvmove -v /dev/md1 /dev/md0
lsblk

Скрин - 16_01.png
********************************************************************************

17. Сделайте --fail на устройство в вашем RAID1 md.

mdadm /dev/md0 --fail /dev/sdb1

Скрин - 17_01.png
********************************************************************************

18. Подтвердите выводом dmesg, что RAID1 работает в деградированном состоянии.

dmesg
или
dmesg | grep raid1

Скрин - 18_01.png
********************************************************************************

19. Протестируйте целостность файла, несмотря на "сбойный" диск он должен
продолжать быть доступен:

gzip -t /tmp/new/test.gz
echo $?
0

Скрин - 19_01.png
********************************************************************************

20. Погасите тестовый хост, vagrant destroy.

exit
exit
vagrant destroy -f

Скрин - 20_01.png
********************************************************************************
